<UserControl x:Class="ARK_Server_Manager.ServerSettingsControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:globcntrls="clr-namespace:WPFSharp.Globalizer.Controls;assembly=WPFSharp.Globalizer"             
             xmlns:Globalizer="clr-namespace:WPFSharp.Globalizer;assembly=WPFSharp.Globalizer"
             xmlns:local="clr-namespace:ARK_Server_Manager"
             xmlns:lib="clr-namespace:ARK_Server_Manager.Lib"
             mc:Ignorable="d"
             x:Name="SettingsControl">
    <UserControl.Resources>
        <lib:DifficultyOffsetValueConverter x:Key="DifficultyOffsetValueConverter" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <Style TargetType="local:AnnotatedTextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="local:AnnotatedTextBox">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Label Grid.Column="0" Content="{TemplateBinding Label}"/>
                            <TextBox Grid.Column="1" Text="{TemplateBinding Text}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
        <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
        <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
        <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
        <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
        <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ToggleButton}">
        				<Border Padding="{TemplateBinding Padding}">
        					<Grid Background="Transparent" SnapsToDevicePixels="False">
        						<Grid.RowDefinitions>
        							<RowDefinition Height="19"/>
        							<RowDefinition Height="*"/>
        						</Grid.RowDefinitions>
        						<Grid>
        							<Grid.LayoutTransform>
        								<TransformGroup>
        									<TransformGroup.Children>
        										<TransformCollection>
        											<RotateTransform Angle="-90"/>
        										</TransformCollection>
        									</TransformGroup.Children>
        								</TransformGroup>
        							</Grid.LayoutTransform>
        							<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
        							<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
        						</Grid>
        						<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
        					</Grid>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsChecked" Value="true">
        						<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="true">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
        					</Trigger>
        					<Trigger Property="IsPressed" Value="true">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
        						<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ToggleButton}">
        				<Border Padding="{TemplateBinding Padding}">
        					<Grid Background="Transparent" SnapsToDevicePixels="False">
        						<Grid.ColumnDefinitions>
        							<ColumnDefinition Width="19"/>
        							<ColumnDefinition Width="*"/>
        						</Grid.ColumnDefinitions>
        						<Grid>
        							<Grid.LayoutTransform>
        								<TransformGroup>
        									<TransformGroup.Children>
        										<TransformCollection>
        											<RotateTransform Angle="180"/>
        										</TransformCollection>
        									</TransformGroup.Children>
        								</TransformGroup>
        							</Grid.LayoutTransform>
        							<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
        							<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
        						</Grid>
        						<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
        					</Grid>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsChecked" Value="true">
        						<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="true">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
        					</Trigger>
        					<Trigger Property="IsPressed" Value="true">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
        						<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ToggleButton}">
        				<Border Padding="{TemplateBinding Padding}">
        					<Grid Background="Transparent" SnapsToDevicePixels="False">
        						<Grid.RowDefinitions>
        							<RowDefinition Height="19"/>
        							<RowDefinition Height="*"/>
        						</Grid.RowDefinitions>
        						<Grid>
        							<Grid.LayoutTransform>
        								<TransformGroup>
        									<TransformGroup.Children>
        										<TransformCollection>
        											<RotateTransform Angle="90"/>
        										</TransformCollection>
        									</TransformGroup.Children>
        								</TransformGroup>
        							</Grid.LayoutTransform>
        							<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
        							<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
        						</Grid>
        						<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
        					</Grid>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsChecked" Value="true">
        						<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="true">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
        					</Trigger>
        					<Trigger Property="IsPressed" Value="true">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
        						<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="ExpanderHeaderFocusVisual">
        	<Setter Property="Control.Template">
        		<Setter.Value>
        			<ControlTemplate>
        				<Border>
        					<Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
        				</Border>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ToggleButton}">
        				<Border Padding="{TemplateBinding Padding}">
        					<Grid Background="Transparent" SnapsToDevicePixels="False">
        						<Grid.ColumnDefinitions>
        							<ColumnDefinition Width="19"/>
        							<ColumnDefinition Width="*"/>
        						</Grid.ColumnDefinitions>
        						<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
        						<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
        						<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
        					</Grid>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsChecked" Value="true">
        						<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="true">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
        					</Trigger>
        					<Trigger Property="IsPressed" Value="true">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
        						<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
        						<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
        						<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        	<Setter Property="VerticalContentAlignment" Value="Stretch"/>
        	<Setter Property="BorderBrush" Value="Transparent"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type Expander}">
        				<Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true" Padding="1" Margin="0,0,0,8" BorderBrush="Black" Background="#FFCFC8BA">
        					<DockPanel Background="#FFEAE7E0">
        						<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="4,4,1,4" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
        						<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="10,0,0,0"/>
        					</DockPanel>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsExpanded" Value="true">
        						<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
        					</Trigger>
        					<Trigger Property="ExpandDirection" Value="Right">
        						<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
        						<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
        						<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
        					</Trigger>
        					<Trigger Property="ExpandDirection" Value="Up">
        						<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
        						<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
        						<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
        					</Trigger>
        					<Trigger Property="ExpandDirection" Value="Left">
        						<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
        						<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
        						<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <LinearGradientBrush x:Key="BeigeGradient" EndPoint="0.5,1" StartPoint="0.5,0">
        	<GradientStop Color="#FFECE1D4" Offset="1"/>
        	<GradientStop Color="#FFEAE8E6"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="BeigeLabel" Color="#FFE6DFD8"/>
        <SolidColorBrush x:Key="BeigeBorder" Color="#FFD8CCBC"/>      
    </UserControl.Resources>
    <Grid Background="{DynamicResource BeigeGradient}">
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition Height="76"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Border Margin="10,5" Grid.RowSpan="2" BorderBrush="#FF10274F" BorderThickness="1">
    		<Grid>
    			<Grid DataContext="{Binding Settings}" Margin="0,0,0,65" Grid.Row="0">
    				<Grid.RowDefinitions>
    					<RowDefinition/>
    				</Grid.RowDefinitions>
    				<Grid.ColumnDefinitions>
    					<ColumnDefinition Width="Auto"/>
    					<ColumnDefinition/>
    					<ColumnDefinition Width="Auto"/>
    				</Grid.ColumnDefinitions>
    				<Label Grid.Column="0" Grid.Row="0" FontSize="15" Content="Profile:" Margin="0" VerticalAlignment="Center" HorizontalAlignment="Left" VerticalContentAlignment="Center"/>
    				<TextBox Margin="5" Grid.Column="1"  Grid.Row="0" Text="{Binding ProfileName}" VerticalContentAlignment="Center"
    					ToolTip="The name for the server profile.  This is not the public name users will see in Ark.  For that, set the 'Server Name' field."/>
    				<StackPanel Grid.Column="2" Grid.Row="0" Orientation="Horizontal">
    					<Button Margin="5" Width="50" Content="Load" Click="Load_Click" ToolTip="Load an existing profile, or import one directly from an existing server."/>
    					<Button Margin="5" Width="50" Content="Save" Click="Save_Click" ToolTip="Save the current profile and write the .INI files for the server."/>
    					<Button Margin="5" Width="50" Content="Copy" IsEnabled="False"/>
    				</StackPanel>
    			</Grid>
    			<Grid DataContext="{Binding Runtime}" Margin="0,35,0,0">
    				<Grid.RowDefinitions>
    					<RowDefinition Height="Auto"/>
    					<RowDefinition Height="Auto"/>
    				</Grid.RowDefinitions>
    				<Grid.ColumnDefinitions>
    					<ColumnDefinition Width="Auto"/>
    					<ColumnDefinition/>
    					<ColumnDefinition Width="Auto"/>
    				</Grid.ColumnDefinitions>
    				<StackPanel Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Center">
    					<Border Height="29.95" Background="{DynamicResource BeigeLabel}" Margin="4,2" BorderBrush="{DynamicResource BeigeBorder}" 
						Style="{DynamicResource BorderLabel}">
    						<StackPanel Orientation="Horizontal">
    							<Label FontSize="15" Content="Version:" HorizontalAlignment="Left" Width="60.903" />
    							<Label FontSize="15" Content="{Binding Version}" HorizontalAlignment="Left" Height="29.95" />
    						</StackPanel>
    					</Border>
    					<Border Height="29.95" Background="{DynamicResource BeigeLabel}" Margin="4,2" Style="{DynamicResource BorderLabel}">
    						<StackPanel Orientation="Horizontal">
    							<Label FontSize="15" Content="Server Status:" Height="29.95" Width="99.257"/>
    							<Label FontSize="15" Content="{Binding Status}" Height="29.95" Width="10.001"/>
    						</StackPanel>
    					</Border>
    					<Border Height="29.95" Background="{DynamicResource BeigeLabel}" Margin="4,2" Style="{DynamicResource BorderLabel}">
    						<StackPanel Orientation="Horizontal">
    							<Label FontSize="15" Content="Players" Height="29.95" Width="56.343"/>
    							<Label FontSize="15" Content="{Binding Players}" Height="29.95" Width="10"/>
    							<Label FontSize="15" Content="/" Height="29.95" Width="15.843"/>
    							<Label FontSize="15" Content="{Binding MaxPlayers}" Height="29.95" Width="10"/>
    						</StackPanel>
    					</Border>
    				</StackPanel>
    				<StackPanel Grid.Column="2" Grid.Row="0" Orientation="Horizontal">
    					<Button Margin="5" Width="50" Click="Start_Click">
    						<Button.Style>
    							<Style TargetType="{x:Type Button}">
    								<Style.Triggers>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Initializing}">
    										<Setter Property="Content" Value="Stop"/>
    										<Setter Property="IsEnabled" Value="True"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Running}">
    										<Setter Property="Content" Value="Stop"/>
    										<Setter Property="IsEnabled" Value="True"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Stopping}">
    										<Setter Property="Content" Value="Stop"/>
    										<Setter Property="IsEnabled" Value="False"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Stopped}">
    										<Setter Property="Content" Value="Start"/>
    										<Setter Property="IsEnabled" Value="True"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Unknown}">
    										<Setter Property="Content" Value="Start"/>
    										<Setter Property="IsEnabled" Value="False"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Updating}">
    										<Setter Property="Content" Value="Start"/>
    										<Setter Property="IsEnabled" Value="False"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Uninstalled}">
    										<Setter Property="Content" Value="Start"/>
    										<Setter Property="IsEnabled" Value="False"/>
    									</DataTrigger>
    								</Style.Triggers>
    							</Style>
    						</Button.Style>
    					</Button>
    					<Button Margin="5" Width="50" Click="Upgrade_Click">
    						<Button.Style>
    							<Style TargetType="{x:Type Button}">
    								<Style.Triggers>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Initializing}">
    										<Setter Property="Content" Value="Upgrade"/>
    										<Setter Property="IsEnabled" Value="False"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Running}">
    										<Setter Property="Content" Value="Upgrade"/>
    										<Setter Property="IsEnabled" Value="False"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Stopping}">
    										<Setter Property="Content" Value="Upgrade"/>
    										<Setter Property="IsEnabled" Value="False"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Stopped}">
    										<Setter Property="Content" Value="Upgrade"/>
    										<Setter Property="IsEnabled" Value="True"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Unknown}">
    										<Setter Property="Content" Value="Install"/>
    										<Setter Property="IsEnabled" Value="True"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Updating}">
    										<Setter Property="Content" Value="Cancel"/>
    										<Setter Property="IsEnabled" Value="True"/>
    									</DataTrigger>
    									<DataTrigger Binding="{Binding Status}" Value="{x:Static lib:ServerRuntime+ServerStatus.Uninstalled}">
    										<Setter Property="Content" Value="Install"/>
    										<Setter Property="IsEnabled" Value="True"/>
    									</DataTrigger>
    								</Style.Triggers>
    							</Style>
    						</Button.Style>

    					</Button>
    					<Button Margin="5" Width="50" Content="Logs" IsEnabled="False"/>
    				</StackPanel>
    				<DockPanel Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="2" VerticalAlignment="Center" LastChildFill="False">
    					<StackPanel Orientation="Horizontal" DockPanel.Dock="Left">
    						<Border Height="29.95" Background="{DynamicResource BeigeLabel}" Margin="4,2" Style="{DynamicResource BorderLabel}">
    							<StackPanel Orientation="Horizontal">
    								<Label FontSize="15" Content="Steam Status:" Height="29.95" Width="99.437"/>
    								<Label FontSize="15" Height="29.95" Width="10.001">
    									<Label.Style>
    										<Style TargetType="{x:Type Label}">
    											<Style.Triggers>
    												<DataTrigger Binding="{Binding Steam}" Value="{x:Static lib:ServerRuntime+SteamStatus.Unknown}">
    													<Setter Property="Content" Value="Unknown"/>
    												</DataTrigger>
    												<DataTrigger Binding="{Binding Steam}" Value="{x:Static lib:ServerRuntime+SteamStatus.NeedPublicIP}">
    													<Setter Property="Content" Value="Set Public IP"/>
    												</DataTrigger>
    												<DataTrigger Binding="{Binding Steam}" Value="{x:Static lib:ServerRuntime+SteamStatus.Unavailable}">
    													<Setter Property="Content" Value="Unavailable"/>
    												</DataTrigger>
    												<DataTrigger Binding="{Binding Steam}" Value="{x:Static lib:ServerRuntime+SteamStatus.WaitingForPublication}">
    													<Setter Property="Content" Value="Waiting for publication"/>
    												</DataTrigger>
    												<DataTrigger Binding="{Binding Steam}" Value="{x:Static lib:ServerRuntime+SteamStatus.Available}">
    													<Setter Property="Content" Value="Available"/>
    												</DataTrigger>
    											</Style.Triggers>
    										</Style>
    									</Label.Style>
    								</Label>
    							</StackPanel>
    						</Border>
    					</StackPanel>
    					<StackPanel Orientation="Horizontal" DockPanel.Dock="Right" HorizontalAlignment="Stretch">
    						<Label FontSize="15" Content="My Public IP:"/>
    						<TextBox FontSize="12" Text="{Binding CurrentConfig.MachinePublicIP, ElementName=SettingsControl}" Width="125" LostFocus="Save_Config" VerticalContentAlignment="Center" ToolTip="The IP address players use to connect to your server.">
    							<TextBox.Style>
    								<Style TargetType="{x:Type TextBox}">
    									<Style.Triggers>
    										<DataTrigger  Binding="{Binding Text, RelativeSource={RelativeSource Self}}" Value="">
    											<Setter Property="Background" Value="#ffaaaa"/>
    										</DataTrigger>
    									</Style.Triggers>
    								</Style>
    							</TextBox.Style>
    						</TextBox>
    					</StackPanel>
    				</DockPanel>            
    			</Grid>
    		</Grid>
    	</Border>
        <Border Grid.Row="2" BorderBrush="#FFD4C2B0" BorderThickness="2" Margin="3" Padding="0" >
        	<Border.Background>
        		<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
        			<GradientStop Color="#FFECE1D4"/>
        			<GradientStop Color="#FFEAE8E6" Offset="1"/>
        		</LinearGradientBrush>
        	</Border.Background>
        	<ScrollViewer DataContext="{Binding Settings}" VerticalScrollBarVisibility="Auto" BorderBrush="Black">
        		<StackPanel Margin="10,5,10,5" CanVerticallyScroll="True" ScrollViewer.VerticalScrollBarVisibility="Auto">
        			<Expander IsExpanded="True" Style="{DynamicResource ExpanderStyle1}">
        				<Expander.Header>
        					<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Administration" VerticalAlignment="Center" FontWeight="Bold" FontSize="13.333"/>
        				</Expander.Header>
        				<Grid Margin="10">
        					<Grid.ColumnDefinitions>
        						<ColumnDefinition Width="Auto"/>
        						<ColumnDefinition Width="3*"/>
        						<ColumnDefinition Width="Auto"/>
        						<ColumnDefinition Width="3*"/>
        						<ColumnDefinition Width="Auto"/>
        						<ColumnDefinition Width="3*"/>
        					</Grid.ColumnDefinitions>
        					<Grid.RowDefinitions>
        						<RowDefinition/>
        						<RowDefinition/>
        						<RowDefinition/>
        						<RowDefinition/>
        						<RowDefinition/>
        						<RowDefinition/>
        					</Grid.RowDefinitions>
        					<Label Grid.Column="0" Grid.Row="0" Content="Server Name:"/>
        					<TextBox Grid.Column="1" Grid.Row="0"  Text="{Binding ServerName}" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch"
        						ToolTip="The public name of the server, as seen in Steam and Ark."/>
        					<Label Grid.Column="2" Grid.Row="0" Content="Server Password:"/>
        					<TextBox Grid.Column="3" Grid.Row="0"  Text="{Binding ServerPassword}" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch"
        						ToolTip="The password users must enter in order to access the server. If this is set, only people who know the password can access your server."/>
        					<Label Grid.Column="4" Grid.Row="0" Content="Admin Password:"/>
        					<TextBox Grid.Column="5" Grid.Row="0" Text="{Binding AdminPassword}" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch"
        						ToolTip="Ths password users must enter to execute admin/cheat commands on the server. If this is not set, anyone can use cheats."/>
                            
        					<Label Grid.Column="0" Grid.Row="1" Content="Server Port:"/>
        					<TextBox Grid.Column="1" Grid.Row="1" Text="{Binding ServerConnectionPort}" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch"
        						ToolTip="The port users will use to connect to your server. Default is 7777. Change this and Query Port if you wish to host multiple servers on one machine."/>
        					<Label Grid.Column="2" Grid.Row="1" Content="Query Port:"/>
        					<TextBox Grid.Column="3" Grid.Row="1" Text="{Binding ServerPort}" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch"
        						ToolTip="The port Steam uses to communicate with your server. Default is 27015. Change this and Server Port if you wish to host multiple servers on one machine."/>
        					<Label Grid.Column="4" Grid.Row="1" Content="MultiHome IP:"/>
        					<TextBox Grid.Column="5" Grid.Row="1" Text="{Binding ServerIP}" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch"
        						ToolTip="Sets the IP address to bind the server to. Only necessary if your machine is on multiple networks. Most users do not need to use this and it should remain blank."/>

        					<local:AnnotatedSlider Grid.Column= "0" Grid.ColumnSpan="6" Grid.Row="2" Label="Max Players:"  Value="{Binding MaxPlayers}" Minimum="1" Maximum="127" HorizontalAlignment="Stretch" VerticalAlignment="Center" HorizontalContentAlignment="Stretch" LargeChange="25" SmallChange="10" TickFrequency="10" LabelRelativeWidth="Auto" SliderRelativeWidth="15*" SuffixRelativeWidth="0" 
        						ToolTip="Sets the maximum number of players which can join this server."/>
                            
        					<Label Grid.Column="0" Grid.Row="3" Content="MOTD:"/>
        					<TextBox Grid.Column="1" Grid.ColumnSpan="5" Grid.Row="3"  Text="{Binding MOTD}" TextWrapping="Wrap" MaxLength="256"
        						ToolTip="The Message of the Day displayed to users when they connect to the server."/>

        					<Label Grid.Column="0" Grid.Row="4" Content="Install Directory:"/>
        					<TextBox Grid.Column="1" Grid.ColumnSpan="4" Grid.Row="4" MinWidth="400" HorizontalAlignment="Stretch" Text="{Binding InstallDirectory}" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch"
        						ToolTip="The root directory where the server is installed."/>
        					<Button Grid.Column="5" Grid.Row="4" Width="50" Content="..." Click="SelectInstallDirectory_Click"/>

        					<Label Grid.Column="0" Grid.Row="5" Content="Additional Args:"/>
        					<TextBox Grid.Column="1" Grid.ColumnSpan="5" Grid.Row="5" MinWidth="400" HorizontalAlignment="Stretch" Text="{Binding AdditionalArgs}" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch"
        						ToolTip="Additional command-line args for the server.  If you specify this, add the args which start with ?'s first, followed by any other args.  For example: ?MaxPlayers=5?QueryPort=9999 -nosteamclient" Margin="0.667,0,-0.667,0"/>

        				</Grid>
        			</Expander>
        			<Expander IsExpanded="True" Style="{DynamicResource ExpanderStyle1}">
        				<Expander.Header>
        					<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Rules" VerticalAlignment="Center" FontWeight="Bold" FontSize="13.333"/>
        				</Expander.Header>
        				<Grid Margin ="10">
        					<StackPanel>
        						<CheckBox IsChecked="{Binding EnableHardcore}" Content="Enable Hardcore Mode"/>
        						<CheckBox IsChecked="{Binding EnablePVP}" Content="Enable PvP"/>
        						<CheckBox IsChecked="{Binding EnableTributeDownloads}" Content="Enable Tribute Downloads"/>
        						<local:AnnotatedSlider Label="Difficulty:" Value="{Binding DifficultyOffset, Converter={StaticResource DifficultyOffsetValueConverter}}" 
        							Suffix="%" Minimum="50" Maximum="300" SmallChange="10" LargeChange="50" TickFrequency="10" />
        					</StackPanel>
        				</Grid>
        			</Expander>
        			<Expander IsExpanded="True" Style="{DynamicResource ExpanderStyle1}">
        				<Expander.Header>
        					<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Chat and Notifications" VerticalAlignment="Center" FontWeight="Bold" FontSize="13.333"/>
        				</Expander.Header>
        				<Grid Margin ="10">
        					<StackPanel>
        						<CheckBox IsChecked="{Binding EnableGlobalVoiceChat}" Content="Enable Global Voice Chat"/>
        						<CheckBox IsChecked="{Binding EnableProximityChat}" Content="Enable Proximity Text Chat"/>
        						<CheckBox IsChecked="{Binding EnablePlayerLeaveNotifications}" Content="Enable 'Player Left' Notifications"/>
        						<CheckBox IsChecked="{Binding EnablePlayerJoinedNotifications}" Content="Enable 'Player Joined' Notifications"/>
        					</StackPanel>
        				</Grid>
        			</Expander>
        			<Expander IsExpanded="True" Style="{DynamicResource ExpanderStyle1}">
        				<Expander.Header>
        					<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="HUD and Visuals" VerticalAlignment="Center" FontWeight="Bold" FontSize="13.333"/>
        				</Expander.Header>
        				<Grid Margin ="10">                        
        					<StackPanel>
        						<CheckBox IsChecked="{Binding AllowCrosshair}" Content="Allow Crosshair"/>
        						<CheckBox IsChecked="{Binding AllowHUD}" Content="Allow HUD"/>
        						<CheckBox IsChecked="{Binding AllowThirdPersonView}" Content="Allow Third-Person View"/>
        						<CheckBox IsChecked="{Binding AllowMapPlayerLocation}" Content="Allow Map Player Location"/>
        					</StackPanel>
        				</Grid>
        			</Expander>
        			<Expander IsExpanded="True" Style="{DynamicResource ExpanderStyle1}">
        				<Expander.Header>
        					<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Player Settings" VerticalAlignment="Center" FontWeight="Bold" FontSize="13.333"/>
        				</Expander.Header>
        				<Grid Margin ="10">
        					<StackPanel Grid.Column="0">
        						<CheckBox IsChecked="{Binding EnableFlyerCarry}" Content="Enable Flyer-Carry"/>
        						<local:AnnotatedSlider Label="XP:" Value="{Binding XPMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Damage:" Value="{Binding PlayerDamageMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Resistance:" Value="{Binding PlayerResistanceMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Water Drain:" Value="{Binding PlayerCharacterWaterDrainMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Food Drain:" Value="{Binding PlayerCharacterFoodDrainMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Stamina Drain:" Value="{Binding PlayerCharacterStaminaDrainMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Health Recovery:" Value="{Binding PlayerCharacterHealthRecoveryMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        					</StackPanel>
        				</Grid>
        			</Expander>
        			<Expander IsExpanded="True" Style="{DynamicResource ExpanderStyle1}">
        				<Expander.Header>
        					<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Dino Settings" VerticalAlignment="Center" FontWeight="Bold" FontSize="13.333"/>
        				</Expander.Header>
        				<Grid Margin ="10">
        					<StackPanel Grid.Column="0">
        						<local:AnnotatedSlider Label="Damage:" Value="{Binding DinoDamageMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Tamed Damage:" Value="{Binding TamedDinoDamageMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Resistance:" Value="{Binding DinoResistanceMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Tamed Resistance:" Value="{Binding TamedDinoResistanceMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Food Drain:" Value="{Binding DinoCharacterFoodDrainMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Stamina Drain:" Value="{Binding DinoCharacterStaminaDrainMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Health Recovery:" Value="{Binding DinoCharacterHealthRecoveryMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Dino Spawns:" Value="{Binding DinoCountMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        					</StackPanel>
        				</Grid>
        			</Expander>
        			<Expander IsExpanded="True" Style="{DynamicResource ExpanderStyle1}">
        				<Expander.Header>
        					<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Environment" VerticalAlignment="Center" FontWeight="Bold" FontSize="13.333"/>
        				</Expander.Header>
        				<Grid Margin ="10">
        					<StackPanel Grid.Column="0">                            
        						<local:AnnotatedSlider Label="Taming Speed:" Value="{Binding TamingSpeedMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Harvest Ammount:" Value="{Binding HarvestAmountMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Harvest Health:" Value="{Binding HarvestHealthMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Day Cycle Speed:" Value="{Binding DayCycleSpeedScale}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Day Time Speed:" Value="{Binding DayTimeSpeedScale}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Night Time Speed:" Value="{Binding NightTimeSpeedScale}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        					</StackPanel>
        				</Grid>
        			</Expander>
        			<Expander IsExpanded="True" Style="{DynamicResource ExpanderStyle1}">
        				<Expander.Header>
        					<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Structures" VerticalAlignment="Center" FontWeight="Bold" FontSize="13.333"/>
        				</Expander.Header>
        				<Grid Margin ="10">
        					<StackPanel Grid.Column="0">
        						<local:AnnotatedSlider Label="Structure Resistance:" Value="{Binding StructureResistanceMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Structure Damage:" Value="{Binding StructureDamageMultiplier}" Suffix="x" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1"/>
        						<local:AnnotatedSlider Label="Max Structures Visible:" Value="{Binding MaxStructuresVisible}" Minimum="50" Maximum="5000" LargeChange="50" SmallChange="10" TickFrequency="100" Suffix="items"/>
        						<CheckBox IsChecked="{Binding EnableStructureDecay}" Content="Enable Structure Decay"/>
        						<local:AnnotatedSlider Label="Structure Decay Period:" Value="{Binding PvEStructureDecayDestructionPeriod}" Suffix="?" Minimum="0" Maximum="10" SmallChange="0.1" LargeChange="1" TickFrequency="1" />
        					</StackPanel>
        				</Grid>
        			</Expander>
                         
        		</StackPanel>
        	</ScrollViewer>
        </Border>
    </Grid>
</UserControl>
